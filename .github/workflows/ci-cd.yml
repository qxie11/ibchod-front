name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: iobchod-frontend
  ECS_CLUSTER: ecs-ec2-cluster
  ECS_SERVICE: frontend-service
  CONTAINER_NAME: iphone-store-prod

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

    - name: TypeScript type check
      run: npm run typecheck || echo "TypeScript check failed, continuing..."
      continue-on-error: true

      - name: ESLint check
        run: npm run lint
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://iobchod.shop/v1/api
          NEXT_PUBLIC_BASE_URL: https://iobchod.shop

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      aws-credentials-present: ${{ steps.check-creds.outputs.credentials-present }}
      deployment-status: ${{ steps.deployment.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AWS credentials
        id: check-creds
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "credentials-present=false" >> $GITHUB_OUTPUT
            echo "AWS_CREDENTIALS_PRESENT=false" >> $GITHUB_ENV
            echo "‚ö†Ô∏è AWS credentials missing. Skipping deployment."
          else
            echo "credentials-present=true" >> $GITHUB_OUTPUT
            echo "AWS_CREDENTIALS_PRESENT=true" >> $GITHUB_ENV
            echo "‚úÖ AWS credentials found."
          fi

      - name: Configure AWS credentials
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found in repository root"
            exit 1
          fi

          docker build \
            --build-arg NEXT_PUBLIC_API_URL=https://iobchod.shop/v1/api \
            --build-arg NEXT_PUBLIC_BASE_URL=https://iobchod.shop \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check ECS service status
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        id: check-service
        run: |
          echo "Checking current ECS service status..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].serviceName' \
            --output text 2>/dev/null || echo "None")

          if [ "$SERVICE_EXISTS" = "None" ]; then
            echo "‚ùå ECS service $ECS_SERVICE not found in cluster $ECS_CLUSTER"
            exit 1
          fi

          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,desiredCount:desiredCount}'

      - name: Update ECS service
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        id: deployment
        run: |
          echo "Updating ECS service with new image..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Wait for ECS service to be stable
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        run: |
          echo "Waiting for ECS service to be stable (timeout: 10 minutes)..."
          timeout 600 aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE || {
            echo "‚ùå Timeout waiting for service to be stable"
            exit 1
          }

      - name: Verify deployment
        if: env.AWS_CREDENTIALS_PRESENT == 'true'
        run: |
          echo "Verifying deployment..."
          aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,desiredCount:desiredCount}'

          echo "‚úÖ Deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [ci, cd]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Success
        if: needs.cd.result == 'success' && needs.cd.outputs.aws-credentials-present == 'true'
        run: |
          echo "üéâ Deployment to production completed successfully!"
          echo "üåê Application is available at: https://iobchod.shop"

      - name: Notify CD Skipped
        if: needs.cd.outputs.aws-credentials-present == 'false'
        run: |
          echo "‚ö†Ô∏è CI completed successfully, but CD was skipped."
          echo "Configure AWS credentials to enable automatic deployment."
          echo "üìö See README-CI-CD.md for setup instructions."

      - name: Notify Failure
        if: needs.cd.result == 'failure'
        run: |
          echo "‚ùå Deployment to production failed!"
          echo "Please check the logs and fix the issues."
